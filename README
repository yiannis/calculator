This is just an experiment, to write a simple parser for arithmetic expressions.

A Lexer class is used to scan the input and feed the Parser class with Tokens.
The Parser then creates an Abstract Syntax Tree, using the ExprBase and decendents class.
A Visitor class is used to traverse the AST and execute the code.
The Lexer supports adding named constants. There are also some builtin constants supported,
plus a few functions.

Compile:
$ cmake .
$ make

If you have qt-devel libraries, tests will also be created:
$ ./test

Usage:
$ ./calculator "math-expression" [<var1> <value1>] [<var2> <value2>] ...
E.g:
$ ./calculator "x^2+y*sin(pi*t)" x 0.5 y 2 t 7
t = 7, x = 0.5, y = 2,
x^2+y*sin(pi*t) = 0.249997


--
Copyright 2012 Yiannis Belias
Use under the GPLv3 or later, see COPYING.
--
Yiannis Belias  <yiannisbe@gmail.com>              `
Homepage [http://users.hol.gr/~jonnyb/video] '              .
GNU+LINUX:                                            '           '
In a world without fences who needs Gates?      .                     *
